User:     PSEUDOSTUDENT, MATHS
Automatic Magma log submission from teaching laboratory
Date: 13-10-13  02:20 PM
Loading "/users/ugrad/m2068/magma/MATH2068/MagmaProcedures.txt"
(Magma functions defined for use in MATH2068/2988)
Log file: Sun13Oct.log
seed:  3032277426 0
> p:=2^32+15;
> IsPrime(p);
true
> Factorization(p - 1);
[ <2, 1>, <3, 2>, <5, 1>, <131, 1>, <364289, 1> ]
> F:=FiniteField(p);
> r:=PrimitiveElement(F);
> r;
3
> for i:=1 to 20 do
for> time Log(r,Random(F));
for> end for;
3400267987
Time: 0.000
2918050899
Time: 0.000
1613510088
Time: 0.000
1182741859
Time: 0.000
2350600799
Time: 0.000
1643404007
Time: 0.000
2716904097
Time: 0.000
1169065756
Time: 0.000
2131937978
Time: 0.000
1893348579
Time: 0.000
219413054
Time: 0.000
2856693589
Time: 0.000
2954016567
Time: 0.000
3526609607
Time: 0.000
1325270510
Time: 0.000
305404051
Time: 0.000
3911913269
Time: 0.000
3462652600
Time: 0.000
844475733
Time: 0.000
3512250465
Time: 0.000
>/*
> There is no known efficient algorithm for calculating
> discrete logarithms, but when the numbers are small enough
> and the computer is fast enough even an inefficient algorithm
> may take negligible time
> */
> p:=2^32+61;
> IsPrime(p);
true
> Factorization(p - 1);
[ <2, 2>, <1073741839, 1> ]
>/*
> This one should be harder since the largest prime factor of
> p-1 is bigger than it was in the previous case.
>*/
> F:=FiniteField(p);
> r:=PrimitiveElement(F);
> r;
2
> for i:=1 to 20 do
for> time Log(r,Random(F));
for> end for;
919101378
Time: 0.020
3566562629
Time: 0.040
2297741315
Time: 0.020
2170477045
Time: 0.020
505733746
Time: 0.040
180781486
Time: 0.020
1200438102
Time: 0.000
3017729740
Time: 0.020
1242130284
Time: 0.040
2894879580
Time: 0.020
2347699704
Time: 0.020
3494942179
Time: 0.040
4152928564
Time: 0.020
3990449265
Time: 0.020
1053784417
Time: 0.020
4012727891
Time: 0.000
1084947722
Time: 0.020
674893941
Time: 0.040
2980567234
Time: 0.040
4026159729
Time: 0.040
>/*
> Still very quick, but not as quick as in the previous case.
>*/
> timelog(50);
4.74029824530229264344268607372
0.000
> timelog(50);
11.3904098757401268838269753301
0.020
> timelog(50);
9.32120393029822465531524425018
0.000
> timelog(50);
12.1645384558097986695013248143
0.040
> timelog(50);
14.4760670646936147804234253571
0.040
> timelog(50);
5.27752862246450753666526064856
0.000
> timelog(50);
9.34270883034189465307684822814
0.000
> timelog(50);
12.9270656494550326563218777336
0.020
> timelog(50);
12.1035371185348456231144536900
0.040
> timelog(50);
9.02754740021998737369644587411
0.000
> timelog(50);
13.0057670430347485186782658769
0.040
> timelog(50);
9.34810679501311772398374355724
0.000
> timelog(50);
7.29368062108595293340191051146
0.000
> timelog(50);
13.8549086996352638272089927957
0.040
> timelog(50);
11.5087123016278859997020881216
0.020
> timelog(50);
11.5068701067324392454611728502
0.040
> timelog(50);
8.49946396853364468250769364643
0.000
> timelog(50);
8.93070599414713791438776649242
0.020
> timelog(50);
6.46917579649005321502832183212
0.000
> timelog(50);
8.84392882052357695175105165170
0.000
> timelog(50);
11.8391384617254932619175800368
0.040
> timelog(50);
10.2929553125602236032989636876
0.000
> timelog(50);
5.31208847013454864322167673833
0.000
> timelog(50);
10.4657430730656356737766990411
0.000
> timelog(50);
6.38948139756476859613026667005
0.000
> timelog(50);
16.2736464428849182207493105402
0.020
> timelog(50);
14.2225336284849993089717574188
0.020
> timelog(50);
7.03134818204530554362850328045
0.000
> timelog(50);
9.49269706423275142705875603185
0.020
> timelog(50);
11.9662436232012753371190294583
0.020
> timelog(50);
11.5229237703377672929610410635
0.020
> timelog(50);
7.20492314320669205515126893182
0.000
> timelog(50);
15.2538407889238936943517804929
0.020
> timelog(50);
9.83213967670460438818654369085
0.020
> timelog(50);
8.08376856339389018806363271970
0.000
> timelog(50);
6.00384438886388132208296866437
0.000
> timelog(50);
10.1784227827342333795452438731
0.020
> timelog(50);
7.10409142626184308375246649689
0.000
> timelog(50);
7.21753008727580793286193727015
0.000
> timelog(50);
8.56239008484277546120232658374
0.000
> timelog(50);
10.3711203957118827131092375274
0.020
> timelog(50);
7.37162435865239771292953333320
0.000
> timelog(50);
9.28657678419788495448096745627
0.000
> timelog(50);
10.3131947735658766519482525728
0.000
> timelog(50);
12.8327236525401411804807981530
0.020
>/*
> It never took more than 0.04 seconds. Note that the
> time depends on how long it takes to factorize p-1, on the
> size of the prime factors of p-1, and also on the randomly
> chosen number we are trying to find the log of. At some stage,
> when the computer is searching for a needle in a haystack, it
> may get lucky and find it quickly.
>*/
> timelog(60);
17.7476612918708931319286834177
0.060
> timelog(60);
16.0893421898496332623868961439
0.040
> timelog(60);
6.47212886059976827356257439045
0.020
> timelog(60);
5.63445147866275316550772526559
0.000
> timelog(60);
10.2355874422671902263978159934
0.020
> timelog(60);
13.4140718386242829714704051891
0.040
> timelog(60);
17.2191186986254875429619169309
0.060
> timelog(60);
12.5171838101222593733938721238
0.040
> timelog(60);
11.9221011546955067146290832158
0.060
> timelog(60);
18.1747410893023839258249580626
0.060
> timelog(60);
13.1892495808162123103368387601
0.060
> timelog(60);
8.18493949019950169608272083870
0.020
> timelog(60);
15.1840170260674265198985744375
0.060
> timelog(60);
15.0117007608190963320501155556
0.040
> timelog(60);
14.9366447484752379505844238761
0.040
> timelog(60);
11.5764564554065355916926275122
0.040
> timelog(60);
13.1220134956976695065083102413
0.040
> timelog(60);
9.24156962511655276313670184639
0.000
> timelog(60);
10.6776903921419642822051660892
0.000
> timelog(60);
9.71606997370444569653476737224
0.020
> timelog(60);
13.6423372044853037278073045368
0.060
> timelog(60);
16.7438275336370343315009335867
0.180
> timelog(60);
15.2370941237668526125718148543
0.060
> timelog(60);
8.87183827077493733514604519737
0.000
> timelog(60);
12.0923447930524125985293587566
0.060
> timelog(60);
7.87702314853011617075324068409
0.000
> timelog(60);
8.29183923013175338179792344392
0.000
> timelog(60);
11.1305169200903090577127660042
0.040
> timelog(60);
20.3445732771244585165629900821
0.040
> timelog(70);
12.4980959402471544356368426872
0.080
> timelog(70);
12.2978545116320245887829724496
0.080
> timelog(70);
22.3749420806385394947667316109
0.100
> timelog(70);
10.7081742304613125269060540114
0.080
> timelog(70);
20.1667246469057441037272276155
0.100
> timelog(70);
13.2027314477881836088177044631
0.080
> timelog(70);
9.82735440829028112903421201936
0.020
> timelog(70);
7.67779072875034099884220818646
0.000
> timelog(70);
21.1773307527183228597113848768
0.120
> timelog(70);
13.7778397339861428575843739957
0.100
> timelog(70);
21.0518835745784682288691073958
0.100
> timelog(70);
17.3687153875522630456705091825
0.120
> timelog(70);
13.6372665427580542763260261086
0.080
> timelog(70);
12.0524478399514492852904090443
0.080
> timelog(70);
8.17550671920700657499738555419
0.000
> timelog(70);
21.6703992325077136014087799069
0.060
> timelog(70);
14.5365187810145227035870386038
0.080
> timelog(70);
21.1492649853747340713066032100
0.100
> timelog(70);
23.0146260282845018705925780443
0.100
> timelog(70);
12.6068089617667987560628679688
0.140
> timelog(70);
18.5265278183434860287801653212
0.120
> timelog(70);
11.3380364705453300570279583836
0.100
> timelog(70);
10.0043611419364000349663249087
0.020
> timelog(70);
17.0771513394075389354013933753
0.100
> timelog(80);
23.0932760495087628459254842596
0.200
> timelog(80);
9.48273729668563924161355271328
0.020
> timelog(80);
19.2074022090785754218977336786
0.180
> timelog(80);
23.5130146119464204637240770358
0.220
> timelog(80);
17.8671359856624438584248692112
0.200
> timelog(80);
11.0381914720549470752477257415
0.040
> timelog(80);
24.7414926899877704093648498386
0.220
> timelog(80);
24.5609418290763542555665219130
0.240
> timelog(80);
22.3027143379641032290887000283
0.180
> timelog(80);
15.2678193593272609088587158434
1.320
> timelog(80);
23.9420081776118098722239586847
0.220
> timelog(80);
12.6596099402244920822639261684
0.180
> timelog(80);
15.0747666817524421551098781163
0.140
> timelog(80);
12.8159452871747698221021066696
1.080
> timelog(80);
21.6085721071391219334999030234
0.160
> timelog(80);
9.24370528901701954622877583332
0.020
> timelog(80);
15.0752583176853752334576558532
0.180
> timelog(80);
22.1183389728763021202796544312
0.140
> timelog(80);
12.9230997538969048963160270592
0.180
> timelog(80);
10.5418750464672437224789908702
0.060
> timelog(80);
19.7309370414021174927197579336
0.220
> timelog(80);
19.7102098864035556621480083112
0.240
> timelog(80);
14.4545682405167670549809179842
0.100
> timelog(80);
25.0171259779712967128445803404
0.180
> timelog(80);
22.1226745996803629385345227750
1.080
> timelog(80);
9.70649610602577791964844301615
0.020
> timelog(80);
15.2774223955983039984726932920
0.160
> timelog(80);
11.7071940491998692172080482564
0.220
> timelog(80);
23.0282925044580191760710574249
0.200
> timelog(80);
13.1762682420225727690518766414
0.220
> timelog(80);
24.9754612081864418512010889157
0.180
> timelog(80);
8.93979177057322930861630682109
0.000
> timelog(80);
23.0952723945921388204923114037
0.180
> timelog(80);
24.8507249959107970494257822673
0.140
> timelog(90);
16.6132139841482056500750519810
0.480
> timelog(90);
22.5079197190740324961364709646
0.520
> timelog(90);
12.8724568121308411378870461424
0.300
> timelog(90);
11.6768161782113688737144362313
0.500
> timelog(90);
15.5084056374122388335724778402
0.420
> timelog(90);
23.7163345050263092563276954267
0.380
> timelog(90);
15.0229002443384546030894555811
0.620
> timelog(90);
14.5894766939014433377755550837
0.400
> timelog(90);
14.5962540409962201726771563867
0.480
> timelog(90);
9.42666824984265387584784971636
0.020
> timelog(90);
22.9743331384996253291976926753
0.360
> timelog(90);
18.3525602518006623372451505290
0.500
> timelog(90);
18.2803722209242978063059344669
0.380
> timelog(90);
18.6235977813308741033287851079
0.400
> timelog(90);
18.1328218765936898124276277022
0.440
> timelog(90);
18.0743957086675001122722657281
0.460
> timelog(90);
17.0167767697739675844190559724
0.500
> timelog(90);
8.86264601651964302383609372682
0.000
> timelog(90);
13.4538127326293285962146353356
0.380
> timelog(90);
12.9385744637783966763469320858
0.380
> timelog(100);
28.0102543999472929388630189631
0.780
> timelog(100);
17.9278439801305436559987852103
0.720
> timelog(100);
25.4972311475070540061524730883
0.800
> timelog(100);
13.7632412652894987234159490708
0.960
> timelog(100);
25.7722529441870235731660656793
0.700
> timelog(100);
11.6608087183926917721580837522
0.860
> timelog(100);
24.5326093363553813758376332512
0.520
> timelog(100);
14.0787729577828148038593595507
1.020
> timelog(100);
13.6915931937247652388340729687
0.740
> timelog(100);
26.2784255600641492869326283327
0.860
> timelog(100);
16.0777365493970818194594464059
0.540
> timelog(100);
11.3555751187579921653183087334
1.000
> timelog(100);
24.3331609956510129180128744522
0.800
> timelog(100);
26.8837011972464799969804239552
0.720
> timelog(100);
26.0067125194319916118191693005
0.920
> timelog(100);
27.2258227477124515020003848331
0.780
> timelog(100);
33.5577675946752212777284850916
0.720
> timelog(100);
15.0152553672052849038866759710
0.700
> timelog(100);
25.0373481023176365472334787723
0.840
> timelog(100);
11.5051563263218603521352963088
0.640
> timelog(110);
36.8703392741876954926877662256
1.800
> timelog(110);
15.4168259394305144234858772618
1.540
> timelog(110);
32.5438718119880398440760350730
1.400
> timelog(110);
37.2616941656135736992604638147
1.660
> timelog(110);
23.1158173718680992017593004347
1.260
> timelog(110);
16.3556780321371476284613331475
1.200
> timelog(110);
31.6959711662976548874106201634
1.620
> timelog(110);
15.8259066105894873120333249546
1.380
> timelog(110);
27.5262779345236618707933102558
1.500
> timelog(110);
35.5872359872101152029844809124
1.820
> timelog(110);
34.4641904692694538936181848467
1.500
> timelog(110);
22.0789911298783399190709716528
1.840
> timelog(110);
33.5313589128743915431112673816
1.840
> timelog(110);
17.3359177802506565713404378341
1.960
> timelog(110);
20.7923617964328413911532531646
1.580
> timelog(110);
26.3230104863050941628574086371
1.860
> timelog(110);
23.3944687239857473843969951509
1.720
> timelog(120);
23.3336848289638412188215005824
3.220
> timelog(120);
18.1938154858556762957589378120
3.440
> timelog(120);
27.8706898470351569227689337477
3.440
> timelog(120);
28.3590402283818228633156895612
3.820
> timelog(120);
22.2691512254947236220213784685
3.700
> timelog(120);
12.8300098237018065597844734728
3.380
> timelog(120);
33.2547432125320264289656190119
3.340
> timelog(120);
28.3792076793995580925177790459
3.720
> timelog(120);
24.0954245053718194308957267891
3.960
> timelog(120);
25.3841220159196346968412291753
3.560
> timelog(120);
22.7410850949654978280162386560
3.980
> timelog(130);
14.4154184129680949431382019128
9.260
> timelog(130);
22.6156937156579953725635359604
8.540
> timelog(130);
35.2002845093117395313998259411
8.480
> timelog(130);
22.8475413957417313764032846105
9.640
> timelog(140);
30.2153640295210643675945428929
17.280
> timelog(140);
42.6855226992541267816580481498
17.520
> timelog(140);
17.8262995940886277576689836129
16.360
> timelog(150);
39.5891588965907965180742643868
45.300
> /*
> They are starting to get a bit hard!
>
> Turning now to Question 2, observe that if you increase the number
> of bits by 10 at each step, you will need 56 steps to get from 100
> bits to 660 bits. If the time doubles with each step, then it gets
> doubled 56 times, which means that the overall effect of 56 steps
> is to multiply the time by 2^56.
> So the answer is 2^56 seconds.
> */
> 2^56;
72057594037927936
> /*
> Let me convert this to a real number
> */
> 2.0^56;
72057594037927936.0000000000000
> /*
> How many days are there in this many seconds?
> */
> s:=2.0^56;
> days:=s/(60*60*24);
> days;
833999930994.536296296296296296
> /*
> mmm ... quite a few ..
> */
> centuries:=days/36500;
> centuries;
22849313.1779325012683916793506
> /*
> OK, I won't bother testing it.
> */
> p:=NextPrime(Random(10^199,10^200):Proof:=false);
> p;
8043815433475789412727441507018621933771258888933099224138354549880199275736084\
7636047634070068016770066194571679510223910718651744846886945579402948559962183\
884702043477199790261679138039931072113693
> b:=2;
> m:=Random(p-1);
> GCD(m,p-1);
2
> m:=Random(p-1);
> GCD(m,p-1);
4
> m:=Random(p-1);
> GCD(m,p-1);
4
> m:=Random(p-1);
> GCD(m,p-1);
9
> m:=Random(p-1);
> GCD(m,p-1);
2
> m:=Random(p-1);
> GCD(m,p-1);
1
> k:=Modexp(b,m,p);
> k;
9326339397352807215476318609411766889091011480100759600890029541767968106344665\
8372449278197286665977948280524689923141153221871185675534958951665407864765807\
8922620300475609855700491005018701448158
> m;
6969194201571843860624514250179270886299301092719162825322216874343614115563786\
1077365077483326919356311035613817486532207261567392938258905878436545725440873\
523786036714593331516730490719267782436943
> /*
> Now we pretend that Charlie Brown's Elgamal public key is <p,b,k>, where
> p, b and k are as above. Lucy, who does not not know Charlie's private key m,
> wants to send Charlie a secret message.
> The first step is to encode the message numerically. Charlie has told everyone
> how to do this: use the NaiveEncoding function defined in the publically
> available file MagmaProcedures.txt:
> */
> xx:=NaiveEncoding("In the words of
> Abraham Lincoln, people who like this sort of thing will find this the sort \
of
> thing they like");
> xx;
[ 17321013221620420113221921121420021513221120211016519821419720419720913217620\
5210199211208210144132212201211212208201132219204211132208205207201132216204205\
215132215211214216132211202132216204205210, 
2031322192052082081322022052102001322162042052151322162042011322152112142161322\
11202110216204205210203132216204201221132208205207201 ]
> /*
> OK, Lucy has encoded the message in the manner prescribed by Charlie. Note
> that the encoded form of the plaintext is a sequence of large numbers. In this
> case, the sequence has exactly two terms.
> Now Lucy enciphers it:
> */
> i:=Random(p-1);
> sf:=Modexp(k,i,p);
> ct:=<Modexp(b,i,p),[sf*t mod p: t in xx]>;
> ct;
<331176874363349558416620523870785559009714901297359524842336356669791594739987\
5724123037636485330135801346255137333430938318506824005214002189323447499992285\
1143051663923220320859932346242923427169194, [ 
1382732831756626460236874301698116426295511017410867070909876114492529580124276\
2746460313772067607131413613766554954121036345267237863872590920368586579526736\
89226760955272018433836868075548790448801, 
3235941483211314312391878528948816001811636768850482611524804139646322939892083\
5237876612735251728269979433955740382441741266497591886740736233033374004904972\
551740608155485971330481123220846590668667 ]>
> /*
> Lucy transmits this to Charlie. Note that it has two components: ct[1]
> is some very big number, and ct[2] is a sequence of very big numbers. In this
> instance, ct[2] consists of two terms (because pt had two terms).
>
> Now let us change hats and examine things from Charlie Brown's viewpoint. He has
> received the above enciphered message ct from Lucy, but he does not know the
> number i that she used in the enciphering process. (Even Lucy probably doesn't
> know it any more: she should have deleted it as soon as ct was created.)
> But of course Charlie does know his private key m, and knows that the scrambling
> factor must be equal to the first part of the ciphertext raised to the power m
> and reduced mod p. Charlie needs the inverse of this scrambling factor.
> */
> isf:=Modexp(ct[1],-m,p);
> pt:=[isf*u mod p : u in ct[2]];
> /*
> Charlie has multiplied the two terms that comprise ct[2] by isf, the inverse
> of sf, and this should have recovered the plaintext in its encoded form.
> */
> pt eq xx;
true
> NaiveDecoding(pt);
In the words of
Abraham Lincoln, people who like this sort of thing will find this the sort of
thing they like
> load "tut9data.txt";
Loading "/users/ugrad/m2068/magma/MATH2068/tut9data.txt"
> camel;
HOW THE CAMEL GOT HIS HUMP

by Rudyard Kipling


Now this is the next tale, and it tells how the Camel got his big
hump.

In the beginning of years, when the world was so new and all, and
the Animals were just beginning to work for Man, there was a Camel,
and he lived in the middle of a Howling Desert because he did not
want to work; and besides, he was a Howler himself. So he ate
sticks and thorns and tamarisks and milkweed and prickles, most
'scruciating idle; and when anybody spoke to him he said 'Humph!'
Just 'Humph!' and no more.

Presently the Horse came to him on Monday morning, with a saddle on
his back and a bit in his mouth, and said, 'Camel, O Camel, come
out and trot like the rest of us.'

'Humph!' said the Camel; and the Horse went away and told the Man.

Presently the Dog came to him, with a stick in his mouth, and said,
'Camel, O Camel, come and fetch and carry like the rest of us.'

'Humph!' said the Camel; and the Dog went away and told the Man.

Presently the Ox came to him, with the yoke on his neck and said,
'Camel, O Camel, come and plough like the rest of us.'

'Humph!' said the Camel; and the Ox went away and told the Man.

At the end of the day the Man called the Horse and the Dog and the
Ox together, and said, 'Three, O Three, I'm very sorry for you
(with the world so new-and-all); but that Humph-thing in the Desert
can't work, or he would have been here by now, so I am going to
leave him alone, and you must work double-time to make up for it.'

That made the Three very angry (with the world so new-and-all), and
they held a palaver, and an indaba, and a punchayet, and a pow-wow
on the edge of the Desert; and the Camel came chewing on milkweed
most 'scruciating idle, and laughed at them. Then he said 'Humph!'
and went away again.

Presently there came along the Djinn in charge of All Deserts,
rolling in a cloud of dust (Djinns always travel that way because
it is Magic), and he stopped to palaver and pow-pow with the Three.

'Djinn of All Deserts,' said the Horse, 'is it right for any one to
be idle, with the world so new- and-all?'

'Certainly not,' said the Djinn.

'Well,' said the Horse, 'there's a thing in the middle of your
Howling Desert (and he's a Howler himself) with a long neck and
long legs, and he hasn't done a stroke of work since Monday
morning. He won't trot.'

'Whew!' said the Djinn, whistling, 'that's my Camel, for all the
gold in Arabia! What does he say about it?'

'He says "Humph!"' said the Dog; 'and he won't fetch and carry.'

'Does he say anything else?'

'Only "Humph!"; and he won't plough,' said the Ox.

'Very good,' said the Djinn. 'I'll humph him if you will kindly
wait a minute.'

The Djinn rolled himself up in his dust-cloak, and took a bearing
across the desert, and found the Camel most 'scruciatingly idle,
looking at his own reflection in a pool of water.

'My long and bubbling friend,' said the Djinn, 'what's this I hear
of your doing no work, with the world so new-and-all?'

'Humph!' said the Camel.

The Djinn sat down, with his chin in his hand, and began to think a
Great Magic, while the Camel looked at his own reflection in the
pool of water.

'You've given the Three extra work ever since Monday morning, all
on account of your 'scruciating idleness,' said the Djinn; and he
went on thinking Magics, with his chin in his hand.

'Humph!' said the Camel.

'I shouldn't say that again if I were you,' said the Djinn; 'you
might say it once too often. Bubbles, I want you to work.'

And the Camel said 'Humph!' again; but no sooner had he said it
than he saw his back, that he was so proud of, puffing up and
puffing up into a great big lolloping humph.

'Do you see that?' said the Djinn. 'That's your very own humph that
you've brought upon your very own self by not working. To-day is
Thursday, and you've done no work since Monday, when the work
began. Now you are going to work.'

'How can I,' said the Camel, 'with this humph on my back?'

'That's made a-purpose,' said the Djinn, 'all because you missed
those three days. You will be able to work now for three days
without eating, because you can live on your humph; and don't you
ever say I never did anything for you. Come out of the Desert and
go to the Three, and behave. Humph yourself!'

And the Camel humphed himself, humph and all, and went away to join
the Three. And from that day to this the Camel always wears a humph
(we call it 'hump' now, not to hurt his feelings); but he has never
yet caught up with the three days that he missed at the beginning
of the world, and he has never yet learned how to behave.
> /*
> OK, same procedure again. Lucy wants to send Charlie the piece
> of text called camel (printed above). She first encodes it, then
> enciphers it.
> */
> xx:=NaiveEncoding(camel);
> i:=Random(p-1);
> sf:=Modexp(k,i,p);
> ct:=<Modexp(b,i,p),[sf*t mod p: t in xx]>;
> ct;
<258146582363209513120354140633398161699885310415939245989432194981623750638987\
0798393989097387026616586787850811789353632701673435068111823363670009037595185\
1849088007890686325019881397268248295213262, [ 
5669590558708991984481817039414828775564980291244878552076174904811150180749812\
9054020295701130460120086441948282430344013875322092619369419611417767498798146\
406122117979726134382462595427637815858898, 
2525361093137712278675794133668294437444342516140334955436812390327580899854539\
0198133893202779343752012700849815528973925389943814624227472382821723792201602\
715295120836878389033088408984548582965448, 
4291877873753592870282481929272325455842875925324686220742061128929068316420728\
3081024570218651219609621917097475730161971614417212155680750313475077829772202\
472979930305834234662859638164157630403939, 
5989716871344157344641165952382806586946133641142578897250076093308656850193843\
0267626477901016276092925306041338902987297462581029961481323821927902309246030\
191966216951034184839420917039734806851095, 
5483728834501897437894962361234966431823134102858084972627102763909971504530527\
3754214661785096486226327396675933644824228426437707101404275706519757966270443\
257932991385819988822430774592619330058924, 
2589355108933369136527619117772159006043317600511073663688638482126897317643881\
8032096867998506854900923143641072338881691128599368247156680614014798301229518\
384570033330285681443908810044825074163806, 
9698246197903668026554432854910955875865827174991616989452958592633242147281082\
1532402763197155418899530572280373229083568546759194779073704087787930964365434\
10522404883847041274302821410847161330713, 
4736760158126716667893686148968159197855051071567358501612875494099453711866282\
1053091686338709696314492622586528678032179789082418576401745160480320535601433\
443183282295457505603408150479787247496780, 
6952937446410254086322682708692792868301545770918237685323928670351415259983583\
4432117547833544021545113815184900451532968546616610578780065851508145974670171\
090218992293848040729423306858394343068469, 
5401561741999147144022404440636032362873848622499603699820070790341145720309524\
9698676520307096898164797456540333943075191656802236156943752628483396180475356\
900679191608588310804267108897283945001696, 
1118440149901737118524648195970449158997236260360845066198676818862843415314899\
7924239873648159799294835685173727895785579733505631142849704675562050001967358\
999829538525535920104436156166988481535876, 
2677046329439176218236510050978826141256391139092019093056151999960830367940557\
3671883486688769232996228638431014165836535018005802799120964427772659611591824\
642497464080547543103728952174931448403251, 
6613430942441993271147526780553113017012183705660866413227451078148720045685688\
0472813725738226317722246506665905130757494284893250049455362189989219026982354\
20841210324049093824260216445025690487097, 
7069747052630604315089797434818945387220038635827247960954858425958012912231978\
9388746263530250964388795186356437697224308141269877449205572922101143275291276\
430173940367780511219474308241921175402935, 
4122320792426606739162591233395573869989399654542999880720922023244454205942342\
2634742812507123493834032572783335937349437983250623454971385346730483457635892\
459465971905466164865938683319105889553230, 
6104671951714371241198807778715599107279111166925775889672607594395192930226950\
1878255404766902469228315548550496359758869225920751011450640876677686839585831\
958278350807030911069992557212917330024317, 
7254241657435492593144990137940837847851360433652503192193196008850331250471077\
4424879742881382565253616145222871774911496053176272839278449841629186124355189\
483306730195586869482147581424661478370032, 
7537000428142815645000810203389311494867714781445142460263027280229904550940700\
4791891942820796114723875752068972372496007961971814566858416953317062023333966\
673497057851306345928599014306955294949125, 
1196306175693853398193756549154700751136968471048622427342871640213038063841191\
0250882843608333786168780494502526136722469426392219073618840559588788748704376\
358942209543096262085553655979307144112207, 
2509714730190901821886412780445450039066608746475669242691245182603726805410055\
0988690743606857050658856080628431934706284464417121133439281978009618253002219\
679396997272554363132790534089624428203075, 
4407887446021714017855543014205189692218054941291745093840610323047880476922915\
4858944369352635524897214083336487329463309673921451365421326557374049185000300\
152173350075493544703706022690262521661669, 
8685219494464553133127074270749421610015362873485598731125967847411625074819096\
3868289042849936605477553553104700488952068328003961183614928061013918777080723\
79334535064695131246399790434630737020046, 
4778682229790545604765891204650895933571111243511200610858206051312311124647443\
1406007864392265323082681997819907851103479841173397302248376486377720290116553\
348830396691491284060295512275653842008726, 
1283633099588378278966240311566272451615363001264591199791568422585570512352559\
8007293706738748072490626946947450046928689314277775191563601038427830131645313\
589475783083219886733422492273261000592225, 
1847593315496192650090595661808308783549367941639663101123127566963410672378878\
8900972334677699693205161895777678505689361300335300716075918790672464000719923\
597990577852799786589324075033318079833729, 
5808034921788024804592185363983244740033058313849144795363452746563907425877389\
9626453941317730924054940455144251306739039722900691978371932418165399284312562\
673394583619193408618990873329968313447416, 
2260907207776940177520731430809187227627222373196059356388273734642338218772429\
8635691761304955393550870631904462834573853947339443353037716528142433918282151\
037197182405088032276069239734777855320151, 
1183303134977822589356779211321945144143234476627225192487511785622420190578558\
6799802045570322204799023819273223184151166008159316818835221863292375708929302\
243033281395680188525500218225472621283660, 
5646946659222302537885172076868234208457922251982718319612247264084882668045629\
5611322532691525235867589832076554784364194472283076566360410284937629971092379\
812316812986252211052810331750477107379326, 
1638158208340075602298254683648787058448172709744171073122395925271907747885035\
7318678214172777954537939530109471660231628519677622837310032996315006703529279\
639996482998444684369512745007637942773124, 
4197389666376273383231694784797068165425337278402331891666558498628652587155521\
1094341330695437087388797957916711057643655364360071767665117445545799661649790\
016713354759834701099629276615879009685547, 
1341473903781562363248803738855918006065786507375812066452099359286788965754554\
0515696430995412026873084295860948957923095796384189819732317826124543920700134\
693818511218269064443929225890233779377572, 
7670867816095452129940809623010722990470042103889156037366890212829725155266740\
8104312498077372723881583043333348230335719978461787396575279155528126783426699\
489294491619355285109678990168022400179531, 
3664934714284929696206122064243316936282399735347438553415155100986493522947597\
8293048455857454521763555764177715043801852068255987223195222535366038948262787\
149638323646777178004633956979213011618681, 
7341255386475082248279973104426341850831734501954898427471098910898490145855553\
6479852448392849495865549498064948522347398682158685957520974283196752998294622\
314390816063054516227827799919101827008810, 
2434724740048770556499855224842066829374252927936120146865817687383709175547371\
6581473023753275318669550656399500233117320912026753147919395617428148671688508\
291007486564497012662694813730096572928872, 
9984272100609667222594709655038931408329816312977847329600264829300919896038291\
0466222616159857977958129728451115270544508255454904918817846448794042130764836\
32012626854437535176544349455575960762088, 
1512488145456362862001215945664245875173513918104431491655655317463763022207978\
6102829262963035913592022771076603814115664817643664039245596828638087598342387\
686336064760353719428866934253494428825179, 
4878847520791256118859148688531987426886681868818347685040902108075179555927559\
7887715921392283542061881483832945274563501689038872316557206001988137737207609\
005046843959856128835376640188342367491713, 
2264397690210016578890644179767195150521312776396424381711167909020125164310216\
8259081053146759439937522441329788919791498745698753993984046197115415544635841\
831011966333748321225462258132320502679211, 
4502428220203223849895468892401519384907129127191627642081303456148111495272236\
9470280165299968046669140777465306356113571916532369614815616161533695032910457\
362093775062344243445813999314119393291504, 
6979115549130325295293166957679468634731164694260213943847268859637433420200137\
0626049853671856019771984837619589624588808636984265426722931382450469749418838\
669994112369078656276569229587726471697590, 
5782553189157089184627287640047755813981903247352369059340554666738478621639092\
4200196221940370187202900660169951418275579113936923743874191228376833768703725\
839791439222854253176642111665451584340665, 
7164394385662748907681747838529772468467182877630399680715648824252647394223639\
1856369902520829621793697779602456891245523660212546878262074848452791440619643\
226002554356451004327277514946678123293643, 
1287619777801994255957416330747086756428349300750456183160539140268156441455350\
0185628663012833733061048639534879990443328878497480094328529188378301560442687\
667451300242930847300762592925833293074416, 
4909349235987498153786684693723610638193223023943362986182968695429818545806474\
1640833841564613929297216393939145381867031766108884343460690006139880559519450\
334451399696293695903007088832096214179285, 
7009171742435584266858984896652399014857536884316320563801300729217945568958302\
7445523792685065138902419884267526192880218869907939661220415102869712277169216\
63555501657644606700277770119026507082672, 
6066937304728165628447690533698957712498257316440961266791393200748429717404271\
2120816968009388124088047497062858191434590094925110891570651406200813784811469\
407484693697011262120600310688125571473116, 
1262245271310687570810449649209865195554656126671830150679845167122457841007097\
1819317778667163048436868979548085709398744048300319786882693865536042636382482\
126226113891320314938355303998863271939798, 
1514424722585817226152770626095566527287580581575397111053261238350321036410586\
5645040096685223069855633920460641601695431552996490888215212842140932163695542\
353588924077890427218635178291733467535486, 
6836536127511274078418824695652866615397207715210343793866559365402241790509549\
6928299651958790307750504861945691264470705874727506104136094213104226789260960\
825050296861419177006126973992240833708765, 
3078302834871086297065027493834408777317198012575926571484130105674097661310624\
1126299573067887703425379319455731969105719995927676572956544812442048818398298\
53487582117693434988505362923756406163727, 
5746926669140818038448545529151597667471226688120219074937756192756043998604890\
3920481457717922505312254574882630925742033842247503519334323735781457578858536\
584028239949919605530015913153590689748198, 
7708484498799598778460955938690157667622580376797296901324952554415920137560101\
3348207684424851960020372523063300065626390745927576857541561103972998910017864\
86234930597999385740118345722380599643630, 
7764218012361271151039182361811600106084078295790597082319672941058261233782744\
1191596120496531160767872396564529731697420271970567487479327861896376125574803\
502135932998586297608726110448593562347522, 
3595983574589609372662989207483012133714543758053842815222700824663939199097073\
4643136901509551343639053142874963946979641111267542241524225888792897344302284\
110543039298664455002099831990611980273590, 
3306439199911329109842272999408994208505367339943422433718284166950705797980778\
8385458935388262241855667164085452591468775499753469878590720981288972861022868\
331954669012662744687526327055084164426300, 
3056060489896844305761826225211826477216323048053582668837171663539995202546169\
9076697676269271434870404188054501319448629792691931989251875583994535100715757\
050566336132304067158013892927034425764692, 
3871426276012526142663671795691396407920804648258649401281133884586381202932546\
6622716627403671815392309335919451958637882837798268311263654741710734574714589\
898830290402787003243947167423645503727974, 
5553054737072333959269282754400716425776738472824541683716931242419501913637529\
7647479680858157480843055612990509085126930270244326518110720495803717298833953\
450841893675148638417249040554637572092062, 
2043794325241322483229257449119497484421981779353526503786895440414289668414800\
5060750888744941267771257733473714452650814442119219134895945947804767503687577\
302934722127279470733370756442473722849951, 
1692937927651089565646370138543965814486505544963357992054572214730573502250189\
2629211755216636078334804987248463544499693398521206369075720180904582103311071\
734927602804177036351238453859727885966737, 
6527204449641787982166160929681263617568338190075689381404356112207348973070650\
6220814669575774922621426529923350494435028368109853768282703489908853654714984\
083000580182514762531233966104779996856082, 
6282557306896223911491860781541988047143610862257891852817066391841331166061650\
5890426519186840502389256899574279809156376022725777098477898066144008255304377\
721178391692538695759861569921929224660580, 
5101626645384357501777457035130680713833075723799980018599563851279096435363048\
1103783307180879657038157933169346401305998875059639551892708022099991713916032\
42011277258848122602193863206129141738725, 
2114925075689138336690278588545218019712757267883127192772617328992431018033318\
6013871350006950133330247817803268886486911126598170963085135021258010059720434\
175928786934605822952781014778276612189545, 
4381535962194377012895490766687465062616109876773175785496860036292074117121725\
8377394533437910499078017561664008877774158120387311337630297263378953032950957\
109510044613298983342466315351760200375257, 
4854167300285333197502567302074369341901344218032946073697142882335051592944111\
5335765083257338126341409009758059617639879829849459666669224129824744512895737\
373740353185786801290351000774842114511900, 
5783949221809326691936744902575444628743170135257138177028308885360986573051928\
4320156709932663715919865351142713383627134297563321675724774180359506801103144\
882521289164577056941557592630660763951169, 
1849219628248061021081309880577889796834465730686717249231868436075994366248074\
9239291425147945159441560002360130947809615910242240271113769869754923327535920\
147630553739535821459703547063889348381628 ]>
> /*
> In this case, the sequence pt had 60 terms, and so ct[2] is also a seqence
> with 70 terms.
>
> Now let's pretend to be Charlie, and decipher the message we have just received
> from Lucy.
> */
> isf:=Modexp(ct[1],-m,p);
> NaiveDecoding([isf*u mod p : u in ct[2]]);
HOW THE CAMEL GOT HIS HUMP

by Rudyard Kipling


Now this is the next tale, and it tells how the Camel got his big
hump.

In the beginning of years, when the world was so new and all, and
the Animals were just beginning to work for Man, there was a Camel,
and he lived in the middle of a Howling Desert because he did not
want to work; and besides, he was a Howler himself. So he ate
sticks and thorns and tamarisks and milkweed and prickles, most
'scruciating idle; and when anybody spoke to him he said 'Humph!'
Just 'Humph!' and no more.

Presently the Horse came to him on Monday morning, with a saddle on
his back and a bit in his mouth, and said, 'Camel, O Camel, come
out and trot like the rest of us.'

'Humph!' said the Camel; and the Horse went away and told the Man.

Presently the Dog came to him, with a stick in his mouth, and said,
'Camel, O Camel, come and fetch and carry like the rest of us.'

'Humph!' said the Camel; and the Dog went away and told the Man.

Presently the Ox came to him, with the yoke on his neck and said,
'Camel, O Camel, come and plough like the rest of us.'

'Humph!' said the Camel; and the Ox went away and told the Man.

At the end of the day the Man called the Horse and the Dog and the
Ox together, and said, 'Three, O Three, I'm very sorry for you
(with the world so new-and-all); but that Humph-thing in the Desert
can't work, or he would have been here by now, so I am going to
leave him alone, and you must work double-time to make up for it.'

That made the Three very angry (with the world so new-and-all), and
they held a palaver, and an indaba, and a punchayet, and a pow-wow
on the edge of the Desert; and the Camel came chewing on milkweed
most 'scruciating idle, and laughed at them. Then he said 'Humph!'
and went away again.

Presently there came along the Djinn in charge of All Deserts,
rolling in a cloud of dust (Djinns always travel that way because
it is Magic), and he stopped to palaver and pow-pow with the Three.

'Djinn of All Deserts,' said the Horse, 'is it right for any one to
be idle, with the world so new- and-all?'

'Certainly not,' said the Djinn.

'Well,' said the Horse, 'there's a thing in the middle of your
Howling Desert (and he's a Howler himself) with a long neck and
long legs, and he hasn't done a stroke of work since Monday
morning. He won't trot.'

'Whew!' said the Djinn, whistling, 'that's my Camel, for all the
gold in Arabia! What does he say about it?'

'He says "Humph!"' said the Dog; 'and he won't fetch and carry.'

'Does he say anything else?'

'Only "Humph!"; and he won't plough,' said the Ox.

'Very good,' said the Djinn. 'I'll humph him if you will kindly
wait a minute.'

The Djinn rolled himself up in his dust-cloak, and took a bearing
across the desert, and found the Camel most 'scruciatingly idle,
looking at his own reflection in a pool of water.

'My long and bubbling friend,' said the Djinn, 'what's this I hear
of your doing no work, with the world so new-and-all?'

'Humph!' said the Camel.

The Djinn sat down, with his chin in his hand, and began to think a
Great Magic, while the Camel looked at his own reflection in the
pool of water.

'You've given the Three extra work ever since Monday morning, all
on account of your 'scruciating idleness,' said the Djinn; and he
went on thinking Magics, with his chin in his hand.

'Humph!' said the Camel.

'I shouldn't say that again if I were you,' said the Djinn; 'you
might say it once too often. Bubbles, I want you to work.'

And the Camel said 'Humph!' again; but no sooner had he said it
than he saw his back, that he was so proud of, puffing up and
puffing up into a great big lolloping humph.

'Do you see that?' said the Djinn. 'That's your very own humph that
you've brought upon your very own self by not working. To-day is
Thursday, and you've done no work since Monday, when the work
began. Now you are going to work.'

'How can I,' said the Camel, 'with this humph on my back?'

'That's made a-purpose,' said the Djinn, 'all because you missed
those three days. You will be able to work now for three days
without eating, because you can live on your humph; and don't you
ever say I never did anything for you. Come out of the Desert and
go to the Three, and behave. Humph yourself!'

And the Camel humphed himself, humph and all, and went away to join
the Three. And from that day to this the Camel always wears a humph
(we call it 'hump' now, not to hurt his feelings); but he has never
yet caught up with the three days that he missed at the beginning
of the world, and he has never yet learned how to behave.
> CodeToString(65);
A
> StringToCode("A");
65
> StringToCode("B");
66
> StringToCode("C");
67
> StringToCode("Z");
90
> StringToCode("a");
97
> StringToCode("b");
98
> StringToCode("z");
122
> StringToCode("1");
49
> StringToCode("0");
48
> StringToCode("9");
57
> StringToCode("!");
33
> StringToCode("?");
63
> StringToCode(" ");
32
> NaiveEncoding("A");
[ 165 ]
> NaiveEncoding("AB");
[ 165166 ]
> NaiveEncoding("ABCDEFG");
[ 165166167168169170171 ]
> /*
> The function adds 100 to the code numbers of all the characters in the string
> and then concatenates these numbers to make a Very Big Number. But it doesn't
> tolerate numbers of more than 198 digits: when it gets to 198 digits it
> stops that number and starts on a new one. So NaiveEncoding returns a
> sequence of numbers, where all but the last term of the sequence have 198
> digits, and the last term has at most 198 digits.
> */
> NaiveEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678\
9!@#$_+-,.;ABCDEFGHIJKLMNOPQRZTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmno\
pqrstuvwxyzabcdefghijklmnopqrstuvwxyz01234567890123456789!!!!!!!!!!!!!!!");
[ 16516616716816917017117217317417517617717817918018118218318418518618718818919\
0197198199200201202203204205206207208209210211212213214215216217218219220221222\
148149150151152153154155156157133164135136, 
1951431451441461591651661671681691701711721731741751761771781791801811821901841\
8518618718818919016516616716816917017117217317417517617717817918018118218318418\
5186187188189190197198199200201202203204, 
2052062072082092102112122132142152162172182192202212221971981992002012022032042\
0520620720820921021121221321421521621721821922022122214814915015115215315415515\
6157148149150151152153154155156157133133, 
133133133133133133133133133133133133133 ]
> p:=RandomPrime(50);
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> p:=RandomPrime(50);
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> p:=RandomPrime(50);
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> p:=RandomPrime(50);
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> p:=RandomPrime(50);
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> p:=RandomPrime(50);
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
>/*
> In all the previous cases I needed at most two guesses before
> hitting upon a primitive root. Perhaps in this last case
> I was unlucky and hit upon a prime p with a relatively small
> number of primitive roots. 
> Let us look at p and see.
>*/
> p;
553160126750177
> Factorization(p-1);
[ <2, 5>, <11, 3>, <251, 1>, <659, 1>, <78517, 1> ]
> RealField()!(EulerPhi(p-1)/(p-1));
0.452041756858102102260379478861
>/*
> So the probability that a randomly chosen number a will be
> a primitive root for this prime p is about 45%. That is not
> particularly small. Since it took me seven guesses before I got
> one, I was just unlucky. A bit like tossing a coin and gettin
> seven tails in a row. It sometimes happens.
> Let us repeat the experiment.
>/*
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
>/* 
> This time I got five trues and seven falses.
> 5/12 is about 0.427
>*/
> p:=RandomPrime(50);
> RealField()!(EulerPhi(p-1)/(p-1));
0.399903631991488041869325121228
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
true
>/*
> Five trues in 13 attempts. 5/13 is about 0.385.
>*/
> p:=RandomPrime(50);
> RealField()!(EulerPhi(p-1)/(p-1));
0.483869927127567986476922548135
> p:=RandomPrime(50);
> RealField()!(EulerPhi(p-1)/(p-1));
0.284147425127949198909272955202
>/*
> OK, this time I should have a roughly 1 in 4 chance of
> hitting on a primitive root.
>*/
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
false
> a:=Random(p-1);
> IsPrimitive(a,p);
true
> a:=Random(p-1);
> IsPrimitive(a,p);
false
>/*
> Six trues in thirty-one tries. 6/31 is about 0.19, less than
> the expected 0.28. Today I am just unlucky!
>*/
> p:= RandomPrime(150);
> time PrimitiveRoot(p);
3
Time: 0.260
> p:= RandomPrime(150);
> time PrimitiveRoot(p);
3
Time: 0.040
> p:= RandomPrime(150);
> time PrimitiveRoot(p);
3
Time: 0.040
> p:= RandomPrime(150);
> time PrimitiveRoot(p);
2
Time: 0.080
> p:= RandomPrime(150);
> time PrimitiveRoot(p);
3
Time: 0.700
> p:= RandomPrime(150);
> time PrimitiveRoot(p);
5
Time: 0.480
> p:= RandomPrime(160);
> time PrimitiveRoot(p);
5
Time: 0.060
> p:= RandomPrime(160);
> time PrimitiveRoot(p);
2
Time: 0.120
> p:= RandomPrime(160);
> time PrimitiveRoot(p);
6
Time: 0.660
> p:= RandomPrime(160);
> time PrimitiveRoot(p);
10
Time: 1.000
> p:= RandomPrime(170);
> time PrimitiveRoot(p);
3
Time: 0.540
> p:= RandomPrime(170);
> time PrimitiveRoot(p);
3
Time: 0.080
> p:= RandomPrime(170);
> time PrimitiveRoot(p);
3
Time: 0.120
> p:= RandomPrime(170);
> time PrimitiveRoot(p);
2
Time: 1.220
> p:= RandomPrime(170);
> time PrimitiveRoot(p);
2
Time: 0.140
> p:= RandomPrime(170);
> time PrimitiveRoot(p);
3
Time: 0.240
> p:= RandomPrime(170);
> time PrimitiveRoot(p);
2
Time: 0.200
> p:= RandomPrime(170);
> time PrimitiveRoot(p);
2
Time: 0.160
> p:= RandomPrime(170);
> time PrimitiveRoot(p);
2
Time: 1.180
> p:= RandomPrime(180);
> time PrimitiveRoot(p);
5
Time: 0.180
> p:= RandomPrime(180);
> time PrimitiveRoot(p);
2
Time: 0.540
> p:= RandomPrime(180);
> time PrimitiveRoot(p);
3
Time: 0.220
> p:= RandomPrime(180);
> time PrimitiveRoot(p);
2
Time: 0.200
> p:= RandomPrime(190);
> time PrimitiveRoot(p);
2
Time: 0.080
> p:= RandomPrime(190);
> time PrimitiveRoot(p);
7
Time: 4.440
> p:= RandomPrime(190);
> time PrimitiveRoot(p);
14
Time: 0.120
> p:= RandomPrime(190);
> time PrimitiveRoot(p);
3
Time: 13.780
> /*
> 13.7 seconds -- much slower than all previous cases.
> */
> p:= RandomPrime(200);
> time PrimitiveRoot(p);
5
Time: 0.180
> p:= RandomPrime(200);
> time PrimitiveRoot(p);
3
Time: 0.100
> p:= RandomPrime(200);
> time PrimitiveRoot(p);
2
Time: 1.700
> p:= RandomPrime(200);
> time PrimitiveRoot(p);
3
Time: 0.140
> p:= RandomPrime(200);
> time PrimitiveRoot(p);
3
Time: 0.360
> p:= RandomPrime(200);
> time PrimitiveRoot(p);
2
Time: 0.400
> p:= RandomPrime(210);
> time PrimitiveRoot(p);
10
Time: 0.220
> p:= RandomPrime(210);
> time PrimitiveRoot(p);
2
Time: 0.800
> p:= RandomPrime(210);
> time PrimitiveRoot(p);
2
Time: 2.100
> p:= RandomPrime(210);
> time PrimitiveRoot(p);
5
Time: 0.180
> p:= RandomPrime(210);
> time PrimitiveRoot(p);
7
Time: 32.340
> /*
> Apparently this was a hard case, since it took 32 seconds to
> find a primitive root! Or, rather, it took 32 seconds to prove
> that 7 is a primitive root. The problem is to show that that
> the order of 7 mod p is p-1 rather than some proper divisor of p-1,
> and to show that the order is not a proper divisor you cannot
> avoid the necessity of finding out what the proper divisors
> of p-1 are. So you have to factorize p-1. And if p-1 has two
> large prime factors this is likely to be difficult.
*/
> Factorization(p-1);
[ <2, 1>, <13, 1>, <975753752682312605363734409, 1>, 
<16598220470054661062765590686817687, 1> ]
> /*
> As expected, two large prime factors. It took magma a longish
> time to factorize p-1.
> */
> exit;

Total time: 313.980 seconds, Total memory usage: 100.86MB


